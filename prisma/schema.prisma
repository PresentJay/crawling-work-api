// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id
  name        String
  createdTime DateTime   @default(now()) @db.Timestamptz()
  updatedTime DateTime   @updatedAt @db.Timestamptz()
  UserWork    UserWork[]
  Target      Target[]
  Ticket      Ticket[]
}

model Work {
  id                         String                    @id @default(uuid()) @db.Uuid
  title                      String                    @unique
  objectCount                Int
  avgAccuracyThreshold       Decimal                   @db.Decimal(4, 2)
  failureThreshold           Decimal                   @db.Decimal(4, 2)
  crawlingMetadata           CrawlingMetadataTemplate? @relation(fields: [crawlingMetadataTemplateId], references: [id])
  createdTime                DateTime                  @default(now()) @db.Timestamptz()
  updatedTime                DateTime                  @updatedAt @db.Timestamptz()
  UserWork                   UserWork[]
  crawlingMetadataTemplateId String?                   @db.Uuid
  Ticket                     Ticket[]
}

model UserWork {
  id              String   @id @default(uuid()) @db.Uuid
  user            User     @relation(fields: [userId], references: [id])
  work            Work     @relation(fields: [workId], references: [id])
  allocated       Int      @default(0)
  successed       Int      @default(0)
  totalSpentMills Int      @default(0)
  createdTime     DateTime @default(now()) @db.Timestamptz()
  updatedTime     DateTime @updatedAt @db.Timestamptz()
  userId          String
  workId          String   @db.Uuid
}

model CrawlingMetadataTemplate {
  id                     String                   @id @default(uuid()) @db.Uuid
  name                   String
  description            String?
  createdTime            DateTime                 @default(now()) @db.Timestamptz()
  updatedTime            DateTime                 @updatedAt @db.Timestamptz()
  CrawlingMetadataColumn CrawlingMetadataColumn[]
  Work                   Work[]
}

model CrawlingMetadataColumn {
  id                         String                    @id @default(uuid()) @db.Uuid
  template                   CrawlingMetadataTemplate  @relation(fields: [crawlingMetadataTemplateId], references: [id])
  name                       String
  description                String?
  crawlingMetadataTemplateId String                    @db.Uuid
  ContentScrapingMetadata    ContentScrapingMetadata[]
}

model Country {
  korean  String   @id
  english String?
  Target  Target[]
}

model Language {
  korean  String   @id
  code    String?
  english String?
  Target  Target[]
}

model Category {
  id     String   @id
  korean String?
  Target Target[]
}

model Target {
  pid              Int                @id
  required         Boolean            @default(false)
  disabled         Boolean            @default(false)
  disabledNote     String?
  url              String             @unique
  rank             Int?
  country          Country?           @relation(fields: [countryKorean], references: [korean])
  language         Language?          @relation(fields: [languageKorean], references: [korean])
  category         Category?          @relation(fields: [categoryId], references: [id])
  assignee         User?              @relation(fields: [userId], references: [id])
  countryKorean    String?
  languageKorean   String?
  categoryId       String?
  createdTime      DateTime           @default(now()) @db.Timestamptz()
  updatedTime      DateTime           @updatedAt @db.Timestamptz()
  userId           String?
  Ticket           Ticket[]
  TargetAccessInfo TargetAccessInfo[]
}

model Ticket {
  id                      String                    @id @default(uuid()) @db.Uuid
  target                  Target                    @relation(fields: [targetPid], references: [pid])
  worker                  User                      @relation(fields: [userId], references: [id])
  state                   TicketState               @relation(fields: [ticketStateName], references: [name])
  pageMining              PageMiningMetadata        @relation(fields: [pageMiningMetadataId], references: [id])
  contentMining           ContentMiningMetadata     @relation(fields: [contentMiningMetadataId], references: [id])
  sampleContentUrl        String?
  work                    Work                      @relation(fields: [workId], references: [id])
  createdTime             DateTime                  @default(now()) @db.Timestamptz()
  updatedTime             DateTime                  @updatedAt @db.Timestamptz()
  targetPid               Int
  userId                  String
  workId                  String                    @db.Uuid
  ticketStateName         String
  pageMiningMetadataId    String                    @db.Uuid
  contentMiningMetadataId String                    @db.Uuid
  TargetAccessInfo        TargetAccessInfo[]
  SubTicket               SubTicket[]
  CrawlingRunInfo         CrawlingRunInfo[]
  ContentScrapingMetadata ContentScrapingMetadata[]
}

model TicketState {
  name        String      @id
  description String?
  Ticket      Ticket[]
  SubTicket   SubTicket[]
}

model PagingType {
  name               String               @id
  description        String?
  PageMiningMetadata PageMiningMetadata[]
}

model PageMiningMetadata {
  id                    String      @id @default(uuid()) @db.Uuid
  type                  PagingType? @relation(fields: [pagingTypeName], references: [name])
  selector              String?
  testedTime            DateTime?   @db.Timestamptz()
  testedDurationMills   Int?
  avgPerPaginationMills Int?
  paginationAmount      Int?
  updatedTime           DateTime    @updatedAt @db.Timestamptz()
  pagingTypeName        String?
  Ticket                Ticket[]
  SubTicket             SubTicket[]
}

model ContentMiningMetadata {
  id                    String      @id @default(uuid()) @db.Uuid
  selector              String?
  testedTime            DateTime?   @db.Timestamptz()
  testedDurationMills   Int?
  avgPerPaginationMills Int?
  paginationAmount      Int?
  updatedTime           DateTime    @updatedAt @db.Timestamptz()
  Ticket                Ticket[]
  SubTicket             SubTicket[]
}

model TargetAccessInfo {
  id                  String   @id @default(uuid()) @db.Uuid
  target              Target   @relation(fields: [targetPid], references: [pid])
  accessingTicket     Ticket   @relation(fields: [ticketId], references: [id])
  accessedTime        DateTime @db.Timestamptz()
  redirectedUrl       String?
  accessedTimeoutMax  Int
  accessStatus        String?
  accessStatusMessage String?
  certProtocol        String?
  certIssuer          String?
  certSubject         String?
  targetPid           Int
  ticketId            String   @db.Uuid
}

model SubTicket {
  id                      String                    @id @default(uuid()) @db.Uuid
  parent                  Ticket                    @relation(fields: [ticketId], references: [id])
  url                     String
  state                   TicketState               @relation(fields: [ticketStateName], references: [name])
  pageMining              PageMiningMetadata        @relation(fields: [pageMiningMetadataId], references: [id])
  contentMining           ContentMiningMetadata     @relation(fields: [contentMiningMetadataId], references: [id])
  sampleContentUrl        String?
  ticketId                String                    @db.Uuid
  pageMiningMetadataId    String                    @db.Uuid
  contentMiningMetadataId String                    @db.Uuid
  ticketStateName         String
  createdTime             DateTime                  @default(now()) @db.Timestamptz()
  updatedTime             DateTime                  @updatedAt @db.Timestamptz()
  CrawlingRunInfo         CrawlingRunInfo[]
  ContentScrapingMetadata ContentScrapingMetadata[]
}

model CrawlingRunInfo {
  id                 String     @id @default(uuid()) @db.Uuid
  ticket             Ticket     @relation(fields: [ticketId], references: [id])
  subTicket          SubTicket? @relation(fields: [subTicketId], references: [id])
  isSub              Boolean    @default(false)
  startTime          DateTime   @db.Timestamptz()
  durationMills      Int?
  avgPerSuccessMills Int?
  avgFailMills       Int?
  successRate        Decimal?
  korContentsCount   Int?
  ticketId           String     @db.Uuid
  subTicketId        String?    @db.Uuid
}

model DataProcessingStrategy {
  id                    String                  @id @default(uuid()) @db.Uuid
  name                  String
  description           String?
  hasArgs               Boolean                 @default(false)
  DataProcessigMetadata DataProcessigMetadata[]
}

model DataProcessigMetadata {
  id                        String                   @id @default(uuid()) @db.Uuid
  strategy                  DataProcessingStrategy   @relation(fields: [dataProcessingStrategyId], references: [id])
  args                      String[]
  updatedTime               DateTime                 @updatedAt @db.Timestamptz()
  dataProcessingStrategyId  String                   @db.Uuid
  ContentScrapingMetadata   ContentScrapingMetadata? @relation(fields: [contentScrapingMetadataId], references: [id])
  contentScrapingMetadataId String?                  @db.Uuid
}

model ContentScrapingMetadata {
  id                       String                  @id @default(uuid()) @db.Uuid
  ticket                   Ticket                  @relation(fields: [ticketId], references: [id])
  subTicket                SubTicket?              @relation(fields: [subTicketId], references: [id])
  isSub                    Boolean                 @default(false)
  column                   CrawlingMetadataColumn  @relation(fields: [crawlingMetadataColumnId], references: [id])
  selector                 String?
  dataProcessing           DataProcessigMetadata[]
  ignore                   Boolean                 @default(false)
  ticketId                 String                  @db.Uuid
  subTicketId              String?                 @db.Uuid
  crawlingMetadataColumnId String                  @db.Uuid
}
